# api field is optional
api: v1alpha1

# name field is optional and it should be equal to file name without extension
# default value is file name without extension
name: &name dev

# workspace field is path where we working and strongly automate generated
# don't define this field manual
# default value is dir where this yaml file placed
# but if defined this will be used
workspace: .

# vars field is global, optional and should be a valid yaml dictionary
# default value is null
# keys without + at the end of name will be merged with same keys in children stacks with priority to self keys (helm chart's values behavior)
# keys with + at the end of name will be merged with same keys in children stacks with priority to children keys
# stack file must be a valid yaml dictionary
# keys with string vars may contain helm templates (std go + sprig from masterminds)
vars:
  targetName: &target dev.infra.click
  labels+:
    target: *target
    stack+: dev_stack
  prom:
    chart: var
  loki: |
    {{ .Files.Get "lokiVars.yaml" | nindent 4 | trim }}


# step by step executed
run:
- template:
    input: $STACK/templates/template
    vars: .

# say Hello!
- script: echo "Hello from $(jq .name $VARS)!"

# $VARS environment variable points to temporary json file with current context vars
- script: |
    jq . $VARS

# same as above
- jq . $VARS

# long script
- |
    echo "---"
    echo "test: var"

# just a wrapper for a script:
# jq vars $VARS | helm template name chart --namespace test --repo 'https://kubernetes-charts.storage.googleapis.com/' --version version
- helmTemplate:
    repository: https://kubernetes-charts.storage.googleapis.com/
    chart: prometheus-operator
    version: 8.12.12
    name: prom-oper
    namespace: prometheus
    vars: .vars.prom

# helm template from local(git) chart
- helmTemplate:
    chart_dir: $ROOT/charts/loki
    name: loki
    namespace: logs
    vars: .vars.loki

# just a wrapper for a script:
# $INPUT environment variable points to gomplate.input file or directory
# [ -d $INPUT ] && (jq vars $VARS | gomplate --input-dir $INPUT -d data=stdin:) || (jq vars $VARS | gomplate --file $INPUT -d data=stdin:)
# - gomplate:
#     # dir or file with template
#     input: $STACK/templates/gomplate
#     vars: .

# runs in parralel
stacks:
# stacks are searched by decreasing priority in $STACK, $ROOT, libs dirs
# sub stacks me-397, staging & stacks which fit regexp me-4.* in env dir (regexp is always calculated)
- env:
  - me-397
  - me-4.*
  - staging
# wildcard(regexp) include sorted by stack names with apply vars and tags
- monitoring:
  - prometheus.*:
      vars:
        test: var
      tags:
      - testing_only
# include all in stacks folders (./stacks by default)
# - .*
# include kube-system/aws-auth stack
- kube-system:
  - aws-auth
# inline include stack3 with custom overriding
- name: stack3
  api: v1alpha1
  vars:
    test: var
  tags:
  - testingOnly
# stack from local dir
- dir: ../libs
  vars: {}



tags:
- *target
- test
- dev

# Message wich output to stderr when this stack is processing
message: |
  Install process for target: {{ .vars.targetName }}

# $ROOT is a dir where stack tool is started
# $STACK is a dir where this stack is located
# dirs with additional stacks
# inherited by children stacks
libs:
- $ROOT/libs
# - git: https://gitlab.example.org/utility/tests.git
#   commit: 5be7ad7861c8d39f60b7101fd8d8e816ff50353a
#   path: libraries/tests
