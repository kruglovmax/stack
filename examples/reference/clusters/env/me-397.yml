api: v1alpha1

# name field is optional and it should be equal to file name without extension
# default value is file name without extension
name: &name dev

# vars field is optional and it should be valid yaml dictionary
# default value is null
# keys without + at the end of name will be merged with same keys in children stacks with priority to self keys (as helm chart's behavior)
# keys with + at the end of name will be merged with same keys in children stacks with priority to children keys
vars:
  target_name: &target dev.infra.click
  labels+:
    target: *target
    stack+: dev_stack
  prom:
    chart: var
  loki:
    chart: var

run:
# say Hello!
- script: echo "Hello from $(jq .name $VARS)!"
  output:
  - $stderr
  - $stdout
  - file_in_stack_tmp_dir
  - .output.string_var


# $VARS environment variable points to temporary json file with current context vars
- script: |
    jq . $VARS

# just a wrapper for a script:
# jq vars $VARS | helm template name chart --namespace test --repo 'https://kubernetes-charts.storage.googleapis.com/' --version version
- helmtemplate:
    repository: https://kubernetes-charts.storage.googleapis.com/
    chart: prometheus-operator
    version: 8.12.12
    name: prom-oper
    namespace: prometheus
    vars: .vars.prom

# helm template from local(git) chart
- helmtemplate:
    chart_dir: $STACK_PROJECT_ROOT/charts/loki
    name: loki
    namespace: logs
    vars: .vars.loki

# just a wrapper for a script:
# [ -d templates ] && (jq vars $VARS | gomplate --input-dir templates -d data=stdin:) || (jq vars $VARS | gomplate --file templates -d data=stdin:)
- gomplate:
    # dir or file with template
    input: $STACK_DIR/templates/gomplate
    vars: .

stacks:
# sub stack me-397 in env dir
- env.me-397
# include stack2 but excluding substack1 and all monitoring stacks
- stack2!substack1!monitoring/.*
# wildcard(regexp) include sorted by stack names
- monitoring/.*
# include all in stacks folders (./stacks by default)
# - .*
# include kube-system/aws-auth
- kube-system/aws-auth
# include stack3 with custom overriding
- name: stack3
  vars:
    test: var
  tags:
    - testing_only



tags:
- *target
- test
- dev

message: |
  Install process for target: {{ .vars.target_name }}

libs:
- ../libs
